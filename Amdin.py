#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 25, 2021 04:27:28 PM PKT  platform: Windows NT

import sys
import os
import new_invoice
import platform
import sys
import sqlite3
import tkinter.messagebox as messagebox
from datetime import datetime
import combo_complete
from threading import Thread


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Amdin_support
import sale_form
import add_product
import returns
import sale_form_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    root.protocol('WM_DELETE_WINDOW', destroy_Toplevel1)
    Amdin_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    Amdin_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    root.quit()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("784x361+336+126")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.702, rely=0.028,
                          relheight=0.319, relwidth=0.278)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#82bfbf")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.cont_lbl = tk.Label(self.Frame1)
        self.cont_lbl.place(relx=0.046, rely=0.522, height=45, width=194)
        self.cont_lbl.configure(background="#ffffff")
        self.cont_lbl.configure(disabledforeground="#a3a3a3")
        self.cont_lbl.configure(
            font="-family {Calibri} -size 12 -weight bold -underline 1")
        self.cont_lbl.configure(foreground="#000000")
        self.cont_lbl.configure(text='''+9200000000000''')

        self.email_lbl = tk.Label(self.Frame1)
        self.email_lbl.place(relx=0.046, rely=0.087, height=45, width=194)
        self.email_lbl.configure(activebackground="#f9f9f9")
        self.email_lbl.configure(activeforeground="black")
        self.email_lbl.configure(background="#ffffff")
        self.email_lbl.configure(disabledforeground="#a3a3a3")
        self.email_lbl.configure(
            font="-family {Calibri} -size 12 -weight bold -underline 1")
        self.email_lbl.configure(foreground="#000000")
        self.email_lbl.configure(highlightbackground="#d9d9d9")
        self.email_lbl.configure(highlightcolor="black")
        self.email_lbl.configure(text='''Example@xyz.com''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.282, rely=0.102, height=57, width=296)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#82bfbf")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Calibri} -size 20 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Point of Sale''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.038, rely=0.055, height=74, width=144)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Company Name''')

        # Sale Button
        obj = saling()
        self.sale_btn = tk.Button(top, command=obj.sale)
        self.sale_btn.place(relx=0.179, rely=0.471, height=74, width=157)
        self.sale_btn.configure(activebackground="#ececec")
        self.sale_btn.configure(activeforeground="#000000")
        self.sale_btn.configure(background="#d9d9d9")
        self.sale_btn.configure(disabledforeground="#a3a3a3")
        self.sale_btn.configure(font="-family {Calibri} -size 12 -weight bold")
        self.sale_btn.configure(foreground="#000000")
        self.sale_btn.configure(highlightbackground="#d9d9d9")
        self.sale_btn.configure(highlightcolor="black")
        self.sale_btn.configure(pady="0")
        self.sale_btn.configure(text='''Sale Product''')
        # self.Button1.bind('<Button-1>', self.sale)

        self.Button1_1 = tk.Button(top, command=self.add_prod)
        self.Button1_1.place(relx=0.434, rely=0.471, height=74, width=157)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(
            font="-family {Calibri} -size 12 -weight bold")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Add Product''')

        self.Button1_2 = tk.Button(top, command=self.return_prod)
        self.Button1_2.place(relx=0.676, rely=0.471, height=74, width=157)
        self.Button1_2.configure(activebackground="#ececec")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#d9d9d9")
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(
            font="-family {Calibri} -size 12 -weight bold")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(text='''Return Product''')

    def add_prod(self):
        if add_product.a_checkPoint:
            add_product.vp_start_gui()

    def return_prod(self):
        if returns.r_checkPoint:
            returns.vp_start_gui()


class saling:
    def set_Tk_var(self):
        # Combo Box Setting
        global combobox
        combobox = tk.StringVar()

    def init(self, top, gui, *args, **kwargs):
        global w, top_level, root
        w = gui
        top_level = top
        root = top

    def destroy_window(self):
        # Function which closes the window.
        global top_level
        top_level.destroy()
        top_level = None

    def sale(self):
        sale_form.s_vp_start_gui()


if __name__ == '__main__':
    vp_start_gui()
