#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 18, 2021 01:30:55 PM PKT  platform: Windows NT

import sale_form_support
# import save_xls_pdf
import new_invoice
import platform
import sys
import sqlite3
import tkinter.messagebox as messagebox
from datetime import datetime
import combo_complete
import Amdin


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

s_checkPoint = True


def s_vp_start_gui():
    '''Starting point when module is the main routine.'''
    global s_checkPoint

    s_checkPoint = False

    global val, w, root, top
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', destroy_Toplevel1)
    obj = Amdin.saling()
    obj.set_Tk_var()
    # sale_form_support.set_Tk_var()
    top = Toplevel1(root)
    obj.init(root, top)
    # sale_form_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root, top
    #rt = root
    root = rt
    w = tk.Toplevel(root)
    obj = Amdin.saling()
    obj.set_Tk_var()
    obj.init(w, top, *args, **kwargs)
    # sale_form_support.set_Tk_var()
    top = Toplevel1(w)
    # sale_form_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w, s_checkPoint
    s_checkPoint = True
    # destroy function
    root.destroy()
    w = None


class Toplevel1:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[
                       ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("838x598+274+111")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.main = tk.Frame(top, background="#d7d7d7")
        self.main.place(relx=0.0, rely=0.0, relheight=1.008, relwidth=1.008)

        # Bill ID Label Box
        self.bill_id = tk.IntVar()
        self.bill_box = tk.Label(
            self.main, background="white", textvariable=self.bill_id)
        self.bill_box.place(relx=0.201, rely=0.109, height=30, relwidth=0.159)

        # Product Price Label
        self.p_str = tk.IntVar()

        self.p_box = tk.Label(
            self.main, background="white", textvariable=self.p_str)
        self.p_box.place(relx=0.61, rely=0.109, height=30, relwidth=0.159)
        self.p_str.set("")

        # Discounted Price box
        self.disc_p_str = tk.IntVar()

        self.disc_p_box = tk.Label(
            self.main, background="white", textvariable=self.disc_p_str)
        self.disc_p_box.place(relx=0.61, rely=0.265, height=30, relwidth=0.159)
        self.disc_p_str.set("")

        # Bill ID label
        self.Label1 = tk.Label(
            self.main, background="#d9d9d9", text='''Bill ID''')
        self.Label1.place(relx=0.129, rely=0.116, height=21, width=60)

        # Product Name label
        self.Label1_1 = tk.Label(
            self.main, background="#d9d9d9", text='''Product Name''')
        self.Label1_1.place(relx=0.071, rely=0.186, height=21, width=100)

        # Unit Price label
        self.Label1_2 = tk.Label(
            self.main, background="#d9d9d9", text='''Unit Price(Rs.)''')
        self.Label1_2.place(relx=0.48, rely=0.116, height=21, width=105)

        # qty label
        self.Label1_3 = tk.Label(
            self.main, background="#d9d9d9", text='''Quantity''')
        self.Label1_3.place(relx=0.52, rely=0.186, height=21, width=60)

        # Discount label
        self.Label_add_disc = tk.Label(
            self.main, background="#d9d9d9", text='''Discount(%)''')
        self.Label_add_disc.place(relx=0.071, rely=0.270, height=21, width=90)

        # Discounted Price label
        self.Label_disc_price = tk.Label(
            self.main, background="#d9d9d9", text='''Discounted Price(Rs.)''')
        self.Label_disc_price.place(
            relx=0.45, rely=0.27, height=21, width=120)

        # Product Name Input Box
        self.prod_cbox = tk.IntVar()
        self.p_cbox = combo_complete.AutocompleteCombobox(self.main)
        self.p_cbox.set_completion_list(self.combo_input())
        self.p_cbox.place(relx=0.201, rely=0.186,
                          relheight=0.048, relwidth=0.157)
        self.p_cbox.focus_set()

        self.p_cbox.bind("<Tab>", self.price_focus)
        # self.p_cbox['value'] = self.combo_input()
        # self.prod_cbox.set("")
        self.p_cbox.focus_set()

        # Product discount Box
        self.add_disc_spin = tk.IntVar()

        self.add_disc = tk.Spinbox(
            self.main, from_=0, to=100, background="white", textvariable=self.add_disc_spin)
        self.add_disc.place(relx=0.201, rely=0.263,
                            relheight=0.048, relwidth=0.157)
        self.add_disc.bind("<Tab>", self.add_discount)
        self.add_disc_spin.set('0')

        # Qty Box
        self.qty_spin = tk.IntVar()

        self.qty_box = tk.Spinbox(self.main, from_=1, to=10000, background="white",
                                  buttonbackground="#d9d9d9", textvariable=self.qty_spin)
        self.qty_box.place(relx=0.61, rely=0.186, height=30, relwidth=0.159)
        self.qty_box.bind("<Tab>", self.focus_next_window)
        self.qty_spin.set('1')

        # Add Button
        self.add_btn = tk.Button(
            self.main, text='''ADD''', background="#d9d9d9")
        self.add_btn.place(relx=0.83, rely=0.15, height=50, width=90)
        top.bind(
            "<Return>", lambda event, entryField=self.p_cbox: self.adding_return(event, entryField))
        self.add_btn.bind('<Button-1>', lambda event,
                          entryField=self.p_cbox: self.adding_test(event, entryField))

        # Update Button
        self.updat_btn = tk.Button(
            self.main, text='''UPDATE''', background="#d9d9d9")
        self.updat_btn.place(relx=0.83, rely=0.34, height=50, width=90)
        self.updat_btn.bind('<Button-1>', lambda event,
                            entryField=self.p_cbox: self.s_update_test(event, entryField))

        # Date Label
        self.d_str = tk.IntVar()
        self.d_box = tk.Label(
            self.main, background="white", textvariable=self.d_str)
        self.d_box.place(relx=0.781, rely=0.032, height=30, relwidth=0.159)
        self.d_str.set('')
        self.update_date()

        self.Label1_2_1 = tk.Label(
            self.main, background="#d9d9d9", text='''Date''')
        self.Label1_2_1.place(relx=0.722, rely=0.032, height=30, width=44)

        # Product Table Start///
        self.style.configure('Treeview',  font="TkDefaultFont")
        self.p_table = ScrolledTreeView(
            self.main, columns="Col1 Col2 Col3 Col4 Col5")
        self.p_table.place(relx=0.071, rely=0.365,
                           relheight=0.34, relwidth=0.702)

        # # build_treeview_support starting.

        self.p_table.heading("#0", text="ID", anchor="center")
        self.p_table.column("#0", width="10", minwidth="20",
                            stretch="1", anchor="center")

        self.p_table.heading("Col1", text="Product", anchor="center")
        self.p_table.column("Col1", width="95",
                            minwidth="10", stretch="1", anchor="center")

        self.p_table.heading("Col2", text="Qty", anchor="center")
        self.p_table.column("Col2", width="65",
                            minwidth="10", stretch="1", anchor="center")

        self.p_table.heading("Col3", text="Discount(%)", anchor="center")
        self.p_table.column("Col3", width="65",
                            minwidth="20", stretch="1", anchor="center")

        self.p_table.heading("Col4", text="Price(Rs.)", anchor="center")
        self.p_table.column("Col4", width="65",
                            minwidth="20", stretch="1", anchor="center")

        self.p_table.heading("Col5", text="Total(Rs.)", anchor="center")
        self.p_table.column("Col5", width="65",
                            minwidth="20", stretch="1", anchor="center")
        self.p_table.bind("<Double-1>", self.s_selected)
        # Product Table End///

        # Delete Button
        self.del_btn = tk.Button(self.main, background="#d9d9d9",
                                 text='''DELETE''',  command=lambda: self.deleting())
        self.del_btn.place(relx=0.83, rely=0.53, height=50, width=90)

        self.Label3 = tk.Label(
            self.main, background="#d9d9d9", text='''Product Sale''')
        self.Label3.place(relx=0.307, rely=0.017, height=21, width=174)

        # Sub Total Price
        self.sub = tk.IntVar()

        self.s_total = tk.Label(
            self.main, background="white", textvariable=self.sub)
        self.s_total.place(relx=0.13, rely=0.746, height=30, relwidth=0.135)
        self.sub.set("")

        # Total Discount Input Box
        self.discounts = tk.IntVar()

        self.disc = tk.Entry(self.main, background="white",
                             textvariable=self.discounts)
        self.disc.place(relx=0.367, rely=0.746, height=30, relwidth=0.135)
        self.disc.bind("<Tab>", self.grand_total)
        self.discounts.set("0")

        # Grand Total Label
        self.grand = tk.IntVar()

        self.g_total = tk.Label(
            self.main, background="white", textvariable=self.grand)
        self.g_total.place(relx=0.627, rely=0.746, height=30, relwidth=0.135)
        self.grand.set("")

        # Payment Input Box
        self.pay_box = tk.IntVar()
        self.pay = tk.Entry(self.main, background="white",
                            textvariable=self.pay_box)
        self.pay.place(relx=0.627, rely=0.813, height=30, relwidth=0.135)
        self.pay.bind("<Tab>", self.pay_bal)

        self.Label1_1_1 = tk.Label(
            self.main, background="#d9d9d9", text='''Sub Total''')
        self.Label1_1_1.place(relx=0.036, rely=0.746, height=31, width=76)

        self.Label1_1_1_1 = tk.Label(
            self.main, background="#d9d9d9", text='''Discount''')
        self.Label1_1_1_1.place(relx=0.272, rely=0.746, height=31, width=75)

        self.Label1_1_1_2 = tk.Label(
            self.main, background="#d9d9d9", text='''Grand Total''')
        self.Label1_1_1_2.place(relx=0.509, rely=0.746, height=30, width=96)

        self.Label1_1_1_3 = tk.Label(
            self.main, background="#d9d9d9", text='''Pay''')
        self.Label1_1_1_3.place(relx=0.58, rely=0.813, height=30, width=36)

        self.Label1_1_1_4 = tk.Label(
            self.main, background="#d9d9d9", text='''Balance''')
        self.Label1_1_1_4.place(relx=0.544, rely=0.879, height=30, width=66)

        # Total Price Balance
        self.balance = tk.IntVar()
        self.blnc = tk.Label(self.main, background="white",
                             textvariable=self.balance)
        self.blnc.place(relx=0.627, rely=0.879, height=30, relwidth=0.135)
        self.balance.set("")

        # Print Button
        self.print_btn = tk.Button(
            self.main, background="#d9d9d9", text='''PRINT''')
        self.print_btn.place(relx=0.83, rely=0.72, height=50, width=90)
        top.bind("<Control-p>", self.printing)
        self.print_btn.bind("<Button-1>", self.printing)

        self.sub_total = 0
        self.count = 0
        self.p_table_items = []
        self.starting()

    def starting(self):
        conn = sqlite3.connect('ims.db')
        c = conn.cursor()

        c.execute("SELECT * FROM bills")
        items = c.fetchall()

        bill_id = items[-1]

        bill_ids = bill_id[0]

        bil_id = bill_ids + 1
        self.bill_id.set(bil_id)
        c.close()
        conn.close()

    def s_selected(self, event):
        name = self.p_table.item(self.p_table.selection())['values'][0]
        qty = self.p_table.item(self.p_table.selection())['values'][1]
        disc = self.p_table.item(self.p_table.selection())['values'][2]
        disc_price = self.p_table.item(self.p_table.selection())['values'][3]

        conn = sqlite3.connect('ims.db')

        my_cursor = conn.execute(
            "SELECT rowid,* FROM product WHERE name=?", (name,))
        data_row = my_cursor.fetchone()

        price = data_row[3]

        my_cursor.close()
        conn.close()

        self.prod_cbox.set(name)
        self.qty_spin.set(qty)
        self.add_disc_spin.set(disc)
        self.p_str.set(price)
        self.disc_p_str.set(disc_price)

    def s_update_test(self, event, entryField):

        name = self.p_cbox.get()

        if name in self.p_table_items:
            self.s_update()

            root.after(1, lambda: entryField.focus_set())

            return("break")
        else:
            messagebox.showerror("Warning", "Please Add Item First!")

    def s_update(self):

        selected = self.p_table.focus()

        name = str(self.p_table.item(self.p_table.selection())['values'][0])

        stock = int(float(self.p_table.item(
            self.p_table.selection())['values'][1]))

        prod_qty = int(self.qty_box.get())

        conn = sqlite3.connect('ims.db')

        my_cursor = conn.execute(
            "SELECT rowid,* FROM product WHERE name=?", (name,))
        data_row = my_cursor.fetchone()

        prod_price = data_row[3]

        st = data_row[2]

        disc_prcnt = float(self.add_disc.get())

        disc_price = (disc_prcnt / 100) * prod_price

        d_prod_price = prod_price - disc_price

        print("discounted price: ", d_prod_price, type(d_prod_price))

        t_price = d_prod_price * prod_qty

        print("total price: ", t_price, type(t_price))

        self.p_table.item(selected, text="", values=(
            name, prod_qty, disc_prcnt, d_prod_price, t_price))

        if stock > prod_qty:
            stk = stock - prod_qty
            qty = st + stk
            my_cursor = conn.execute(
                "UPDATE product SET stock = ? WHERE name = ?", (qty, name))
            conn.commit()

        elif stock < prod_qty:
            stk = prod_qty - stock
            qty = st - stk

            if qty < 0:
                messagebox.showerror("Warning", "Out of Stock!")
            else:
                my_cursor = conn.execute(
                    "UPDATE product SET stock = ? WHERE name = ?", (qty, name))
                conn.commit()

        elif stock == prod_qty:
            pass

        my_cursor.close()
        conn.close()

        # For Grand Total calculation
        self.grand_total = 0
        for i in self.p_table.get_children():
            total_prices = float(self.p_table.item(i)['values'][4])
            self.grand_total += total_prices
            print(self.grand_total)

        self.grand.set(self.grand_total)

        # Clearing Boxes
        self.prod_cbox.set("")
        self.qty_spin.set("")
        self.add_disc_spin.set("")
        self.p_str.set("")
        self.disc_p_str.set("")

    def update_date(self):
        global dates
        dates = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
        self.d_str.set(dates)
        self.d_box.after(1000, self.update_date)

    def printing(self, event):

        conn = sqlite3.connect('ims.db')
        c = conn.cursor()

        date = dates

        tree_items = []

        c.execute("""INSERT INTO bills(bill_time) VALUES(?)""", (date,))

        conn.commit()

        c.execute("SELECT * FROM bills")
        items = c.fetchall()

        bill_id = items[-1]

        bill_ids = bill_id[0]

        for i in self.p_table.get_children():
            tree_items.append(self.p_table.item(i)['values'])

            item = self.p_table.item(i)['values'][0]
            quty = int(float(self.p_table.item(i)['values'][1]))
            discnt = float(self.p_table.item(i)['values'][2])
            prices = float(self.p_table.item(i)['values'][3])
            total_prices = float(self.p_table.item(i)['values'][4])

            c.execute("""INSERT INTO items(item_name, qty, discount, price, total_price, bill_id) VALUES(?,?,?,?,?,?)""",
                      (item, quty, discnt, prices, total_prices, bill_ids))
            conn.commit()

        print(tree_items)

        for i, item in enumerate(tree_items):
            item.insert(0, i+1)

        print(tree_items)

        c.close()
        conn.close()

        grand_total = self.grand_total

        new_invoice.print_invoice(bill_ids, date, tree_items, grand_total)

        # Clearing boxes
        self.p_table_items = []
        self.qty_spin.set('1')
        self.p_cbox.delete(0, 'end')
        self.p_str.set("")
        self.disc_p_str.set("")
        self.add_disc_spin.set('0')
        self.sub.set("")
        self.balance.set("")
        self.grand.set("")
        self.pay_box.set("")

        self.sub_total = 0
        self.count = 0

        # tree view remove all
        for row in self.p_table.get_children():
            self.p_table.delete(row)

        # bill id increment
        bil_id = bill_ids + 1
        self.bill_id.set(bil_id)

    # # Printing Function
    # def print_in(self):
    #     new_invoice.print_invoice()

    # Combo Input

    def combo_input(self):
        conn = sqlite3.connect('ims.db')
        cursor = conn.execute('select name from product')

        result = []

        for row in cursor.fetchall():
            result.append(row[0])

        print(result)

        cursor.close()
        conn.close()

        return result

    # Price Input Box
    def price_focus(self, event):

        name = str(self.p_cbox.get())

        conn = sqlite3.connect('ims.db')
        my_cursor = conn.execute(
            "SELECT rowid,* FROM product WHERE name=?", (name,))
        self.data_row = my_cursor.fetchone()

        price = self.data_row[3]

        event.widget.tk_focusNext().focus()

        self.p_str.set(price)

        my_cursor.close()
        conn.close()

        return("break")

    def add_discount(self, event):

        name = str(self.p_cbox.get())

        conn = sqlite3.connect('ims.db')
        my_cursor = conn.execute(
            "SELECT rowid,* FROM product WHERE name=?", (name,))
        data_row = my_cursor.fetchone()

        get_price = data_row[3]

        get_add_disc = int(self.add_disc.get())

        disc_price = (get_add_disc / 100) * get_price

        price = get_price - disc_price

        self.disc_p_str.set(price)

        my_cursor.close()
        conn.close()

        event.widget.tk_focusNext().focus()

        return('break')

    def focus_next_window(self, event):

        event.widget.tk_focusNext().focus()

        return("break")

    def adding_test(self, event, entryField):

        self.adding()

        root.after(1, lambda: entryField.focus_set())

        return("break")

    def adding_return(self, event, entryField):

        self.adding()

        root.after(1, lambda: entryField.focus_set())

        return("break")

    def adding(self):

        try:
            name = str(self.p_cbox.get())
            qty = float(self.qty_box.get())

            if name not in self.p_table_items:

                conn = sqlite3.connect('ims.db')

                my_cursor = conn.execute(
                    "SELECT rowid,* FROM product WHERE name=?", (name,))
                data_row = my_cursor.fetchone()

                get_price = data_row[3]

                get_add_disc = int(self.add_disc.get())

                disc_price = ((get_add_disc / 100) * get_price)

                price = get_price - disc_price

                # price = data_row[3]

                ids = data_row[0]

                st = data_row[2] - qty

                if st < 0:
                    messagebox.showerror("Warning", "Out of Stock!")

                else:
                    p_total = price * qty

                    print(p_total)

                    self.sub_total = self.sub_total + p_total

                    self.sub.set(self.sub_total)

                    print("Subtracted Stock:", st)

                    discount = float(self.disc.get())
                    self.grand_total = self.sub_total - discount
                    self.grand.set(self.grand_total)

                    # Updating Stock value

                    my_cursor = conn.execute(
                        "UPDATE product SET stock = ? WHERE rowid = ?", (st, ids))
                    conn.commit()

                    # adding to tree view
                    #  iid = self.count,

                    self.p_table.insert('', 'end', text=self.count,
                                        values=(data_row[1], qty, get_add_disc, price, p_total)),
                    self.count += 1

                    self.p_table_items.append(name)

                    print(self.p_table_items)

                    # Clearing boxes
                    self.qty_spin.set('1')
                    self.p_cbox.delete(0, 'end')
                    self.p_str.set("")
                    self.disc_p_str.set("")
                    self.add_disc_spin.set('0')

                my_cursor.close()
                conn.close()

            else:
                messagebox.showerror("Warning", "Please Update Table Item!")

        except sqlite3.Error as my_err:
            print("error: ", my_err)

    def grand_total(self, event):

        discount = float(self.disc.get())
        self.grand_total = self.sub_total - discount
        print("ok")

        self.grand.set(self.grand_total)

        event.widget.tk_focusNext().focus()

        return("break")

    def pay_bal(self, event):

        self.payment = int(float(self.pay.get()))

        balanc_pay = self.payment - self.grand_total

        self.balance.set(balanc_pay)

        event.widget.tk_focusNext().focus()

        return("break")

    def deleting(self):
        # selected item
        items = self.p_table.selection()

        # getting total price of a product in tree view
        t_p = self.p_table.item(self.p_table.selection())['values'][3]
        p = float(t_p)

        # getting name of a product in tree view
        name = self.p_table.item(self.p_table.selection())['values'][0]

        # getting stock of a product in tree view
        stock = self.p_table.item(self.p_table.selection())['values'][1]
        stock = float(stock)

        # Updating DB
        conn = sqlite3.connect('ims.db')

        my_cursor = conn.execute(
            "SELECT rowid,* FROM product WHERE name=?", (name,))
        data_row = my_cursor.fetchone()

        st = data_row[2] + stock

        my_cursor = conn.execute(
            "UPDATE product SET stock = ? WHERE name = ?", (st, name))
        conn.commit()

        # print(data_row[1])
        print("Added Stock: ", st)

        my_cursor.close()
        conn.close()

        discount = int(float(self.disc.get()))

        if self.pay.get() == "":

            self.sub_total = self.sub_total - p
            self.sub.set(self.sub_total)
            # print("ok: ", self.sub_total)

            # Grand Total after item deleting
            self.grand_total = self.sub_total - discount
            self.grand.set(self.grand_total)

        else:
            # Setting Sub Total after deleting items
            self.sub_total = self.sub_total - p
            self.sub.set(self.sub_total)
            # print("ok: ", self.sub_total)

            # Grand Total after item deleting
            self.grand_total = self.sub_total - discount
            self.grand.set(self.grand_total)

            # Balance after item deleting
            self.payment = int(self.pay.get())
            balanc_pay = self.payment - self.grand_total
            self.balance.set(balanc_pay)

        self.count -= 1

        self.p_table.delete(items)

        # updating items num list
        self.p_table_num = []

        for i in self.p_table.get_children():
            item_num = str(self.p_table.item(i)['values'][0])
            self.p_table_items.append(item_num)


# The following code is added to facilitate the Scrolled widgets you specified.


class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind(
            '<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>',
                       lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    s_vp_start_gui()
